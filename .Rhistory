zoo_object2
merged_zoo <- merge(zoo_object, zoo_object2)
merged_zoo
monthly_sum <- aggregate(zoo_object, as.yearmon, sum)
monthly_sum
# Plotting a zoo object
plot(zoo_object, type = "b", col = "blue", main = "Zoo Object Plot", xlab = "Date",
ylab = "Values")
zoo_object <- zoo(historical_data$tubes_1.0_ml, historical_data$date)
# Plotting a zoo object
plot(zoo_object, type = "b", col = "blue", main = "Zoo Object Plot", xlab = "Date",
ylab = "Values")
zoo_object
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
melsyd
fpp::melsyd
library(fpp)
install.packages("fpp")
a10
?autoplot
autoplot(historical_data)
autoplot.zoo(zoo.object)
zoo_object
autoplot.zoo(zoo_object)
load_all()
zoo_ts()
load_all()
zoo_ts()
use_package("zoo")
check(0)
check()
ggseasonplot(zoo_ts())
class(zoo_ts())
load_all()
zoo_ts()
load_all()
zoo_ts()
x <- zoo_ts()
regular_dates <- seq(min(x$date), max(x$date), by = "day")
dates <- as.Date(c("2023-01-01", "2023-01-05", "2023-01-12", "2023-01-20", "2023-01-25"))
values <- c(10, 12, 15, 18, 17)
uneven_ts <- zoo(values, order.by = dates)
uneven_ts
regular_dates <- seq(min(dates), max(dates), by = "day")
x <- readHistorical()
x
regular_dates <- seq(min(x$date), max(x$date), by = "day")
regular_dates
as.ts(zoo_ts())
?as.ts
load_all()
zoo_ts()
load_all()
document()
zoo_ts()
print(zoo_ts())
load_all()
z z- zoo_ts()
z <- zoo_ts()
z
load_all()
z <- zoo_ts()
z
z_ts <- as.ts(z)
z_ts
ggseasonplot(z_ts)
ggseasonplot(z)
autoplot(z)
corr(z)
ggAcf(z)
meanf(z)
naive(z)
rwf(z)
autoplot(BoxCox(elec,lambda))
autoplot(BoxCox(z,lambda))
autoplot(BoxCox(z))
(lambda <- BoxCox.lambda(z))
autoplot(BoxCox(z, lambda))
res <- residuals(naive(z))
res
autoplot(res)
gghistogram(res)
ggAcf(res) + ggtitle("ACF of residuals")
gghistogram(res)
Box.test(res, lag=10)
checkresiduals(naive(x))
checkresiduals(naive(z))
window(z)
window(z, start = 2025-03-27)
window(z, start = "2025-03-27")
meanf(z)
z1 <- meanf(z, h=40)
z1
z1 <- meanf(z, h=10)
?meanf
e <- tsCV(z, forecastfunction=naive, h=8)
e
mse <- colMeans(e^2, na.rm = T)
data.frame(h = 1:8, MSE = mse) %>%
ggplot(aes(x = h, y = MSE)) + geom_point()
autoplot(naive(z))
naive(z, bootstrap=TRUE)
forecast(z)
z
uschange
?forecast
auto.arima(z)
fit <- auto.arima(z)
fit %>% forecast() %>% autoplot()
head(readHistorical())
load_all()
z <- zoo_ts()
z
fit <- auto.arima(z)
fit %>% forecast() %>% autoplot()
# Create a dataframe with dates and a measure of freezer fullness
# Replace this with your actual data
freezer_data <- data.frame(
Date = as.Date(c("2024-01-01", "2024-02-01", "2024-03-01", "2024-04-01", "2024-05-01", "2024-06-01", "2024-07-01")),
Volume = c(10, 15, 22, 28, 35, 43, 50)
)
print(freezer_data)
load_all()
biospecimen_collections <- readCollections()
biospecimen_collections
colnames(biospecimen_collections)
build_readme()
check()
styler::tidyverse_style()
styler::style_pkg()
colnames(readCollections())
A more thorough description of every column in `readCollections()`:
build_readme()
build_readme()
check()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
styler::style_pkg()
build_readme()
build_readme()
build_readme()
build_readme()
readKBExcel()
my_tibble <- tibble(
id = c(101, 102, 103),
name = c("Alice", "Bob", "Charlie"),
score = c(85, 92, 78)
)
my_tibble
load_all()
capacityNumbers()
load_all()
capacityNumbers()
load_all(0)
load_all()
install()
check(0)
check()
load_all()
capacityNumbers()
capacityNumbers()$tubes_1.0ml_max_capacity
load_all()
readHistorical()
load_all()
readHistorical()
load_all()
longifyReadHistorical()
x <- longifyReadHistorical()
x
x <- readHistorical()
x
tidyr::pivot_longer(x, cols = c("proportion_1.0", "proportion_1.9", "proportion_total"), names_to = "tube_type", values_to = "total")
load_all(0)
load_all()
longifyReadHistorical(total_or_prop = "prop")
ggplot(historical_data_long, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Tubes Submitted to BioStore") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
ggplot(historical_data_long_proportions, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Tubes Submitted to BioStore") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
historical_data_long_proportions <- longifyReadHistorical(total_or_prop = "prop")
ggplot(historical_data_long_proportions, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Tubes Submitted to BioStore") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
load_all(0)
load_all()
build_readme()
longifyReadHistorical()
longifyReadHistorical()
load_all()
longifyReadHistorical()
load_all()
longifyReadHistorical()
check()
readHistorical()
longifyReadHistorical()
load_all()
head(longifyReadHistorical())
x <- longifyReadHistorical()
x
x <- readHistorical()
x
tidyr::pivot_longer(x, cols = c("cumulative_1.0", "cumulative_1.9"), names_to = "tube_type", values_to = "total")
y <- tidyr::pivot_longer(x, cols = c("cumulative_1.0", "cumulative_1.9"), names_to = "tube_type", values_to = "total")
y
y %>% dplyr::mutate(tube_type = recode(.data$tube_type, "cumulative_1.0" = "size 1.0mL", "cumulative_1.9" = "size 1.9mL"))
x
tidyr::pivot_longer(x, cols = c("cumulative_1.0", "cumulative_1.9"), names_to = "tube_type", values_to = "total")
readHistorical()
x <- readHistorical()
x
tidyr::pivot_longer(x, cols = c("cumulative_1.0", "cumulative_1.9"), names_to = "tube_type", values_to = "total")
tidyr::pivot_longer(x, cols = c("cumulative_1.0", "cumulative_1.9", "cumulative_total"), names_to = "tube_type", values_to = "total")
y <- tidyr::pivot_longer(x, cols = c("cumulative_1.0", "cumulative_1.9", "cumulative_total"), names_to = "tube_type", values_to = "total")
y
y %>% dplyr::mutate(tube_type = recode(.data$tube_type, "cumulative_1.0" = "size 1.0mL", "cumulative_1.9" = "size 1.9mL"))
y %>% dplyr::mutate(tube_type = recode(.data$tube_type, "cumulative_1.0" = "size 1.0mL", "cumulative_1.9" = "size 1.9mL", "cumulative_total" = "all sizes"))
load_all()
longifyReadHistorical()
a <- longifyReadHistorical()
a
load_all()
a <- longifyReadHistorical()
a
build_readme()
load_all()
ggplot(historical_data_long_proportions, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Proportion of BioStore Capacity Filled") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
ggplot(historical_data_long_proportions, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Proportion of BioStore Capacity Filled") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y") +
geom_hline(y = 1)
?geom_hline
ggplot(historical_data_long_proportions, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Proportion of BioStore Capacity Filled") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y") +
geom_hline(yintercept = 1)
build_readme()
x <- readKBExcel()
x
load_all()
pendingNumbers()
readHistorical()
x <- readHistorical()
x
colnames(x)
x
x %>% add_row(.data$Suchi_date = "Charlie", .data$date = ymd(2025-09-11))
x %>% add_row(Suchi_date = "Charlie", date = ymd(2025-09-11))
x %>% add_row(date = ymd(2025-09-11))
print(n = ...)
?print
print(x %>% add_row(date = ymd(2025-09-11)))
tail(x %>% add_row(date = ymd(2025-09-11)))
x %>% add_row(date = ymd("2025-09-11"))
tail(x %>% add_row(date = ymd("2025-09-11")))
check()
load_all()
addPending()
tail(addPending())
pendingNumbers()
pendingNumbers()$tubes_1.9ml_pending
load_all()
tail(addPending())
load_all()
tail(addPending())
load_all()
tail(addPending())
load_all()
tail(addPending())
load_all()
tail(addPending())
load_all()
tail(addPending())
load_all()
tail(addPending())
class(addPending()$Suchi_date)
load_all()
class(addPending()$Suchi_date)
tail(addPending())
load_all()
check()
load_all()
ggplot(historical_data_long, aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Tubes Submitted to BioStore") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
ggplot(longifyReadHistorical(), aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Tubes Submitted to BioStore") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
ggplot(longifyReadHistorical(add_pending = TRUE), aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Tubes Submitted to BioStore") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y")
ggplot(longifyReadHistorical(total_or_prop = "prop", add_pending = TRUE), aes(x = date, y = total, colour = tube_type)) +
geom_point() +
geom_smooth() +
theme_bw() +
ylab("Cumulative Proportion of BioStore Capacity Filled") +
xlab("") +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y") +
geom_hline(yintercept = 1)
check()
fromJSON(list.files(pattern = "json"), flatten= TRUE, simplifyDataFrame = TRUE)
jsonlite::fromJSON(list.files(pattern = "json"), flatten= TRUE, simplifyDataFrame = TRUE)
jsonlite::fromJSON(list.files(path = "/Users/meghanshilts/Downloads/site_report_2025_09_11_07_43_04.json", pattern = "json"), flatten= TRUE, simplifyDataFrame = TRUE)
list.files(path = "/Users/meghanshilts/Downloads/site_report_2025_09_11_07_43_04.json", pattern = "json")
list.files(path = "/Users/meghanshilts/Downloads/site_report_2025_09_11_07_43_04.json")
list.files(path = "/Users/meghanshilts/Downloads/", pattern = "site_report_2025_09_11_07_43_04.json")
list.files(path = "/Users/meghanshilts/Downloads/", pattern = "site_report_2025_09_11_07_43_04.json$")
list.files(path = "/Users/meghanshilts/Downloads/", pattern = "site_report_2025_09_11_07_43_04.json$")
jsonlite::fromJSON(list.files(path = "/Users/meghanshilts/Downloads/", pattern = "site_report_2025_09_11_07_43_04.json$"), flatten= TRUE, simplifyDataFrame = TRUE)
# 1. Load and adjust with initial stock
hist <- readHistorical()
init_1ml  <- 196412 - hist$cumulative_1.0[nrow(hist)]
source("~/Library/Containers/com.microsoft.Outlook/Data/tmp/Outlook Temp/single_arima[19].R")
check()
build_readme()
library(biostoreCapacity)
load_all()
library(xts)
library(zoo)
horizon <- 6  # months
covariates_interval <- "mean" # "upper" for a worst case scenario on the covariates
# 1. Load and adjust with initial stock
hist <- readHistorical()
hist
hist$cumulative_1.0[nrow(hist)]
init_1ml  <- 196412 - hist$cumulative_1.0[nrow(hist)]
init_1ml
init_1.9ml <- 212692 - hist$cumulative_1.9[nrow(hist)]
hist_init <- hist %>%
mutate(
cumulative_1.0 = cumulative_1.0 + init_1ml,
cumulative_1.9 = cumulative_1.9 + init_1.9ml,
capacity_1.0_ml = cumulative_1.0 / 788256,
capacity_1.9_ml = cumulative_1.9 / 438840,
total_capacity  = capacity_1.0_ml + capacity_1.9_ml,
prop_1ml = tubes_1.0_ml / (tubes_1.0_ml + tubes_1.9_ml),
prop_1ml = ifelse(is.na(prop_1ml), 0, prop_1ml),
total_submitted_capacity = .5*total_submitted/788256 +  .5*total_submitted/438840 # this is our prior on how many will return from each site
) %>%
select(date, total_capacity, prop_1ml, total_submitted_capacity)
hist_init
zoo_total <- zoo(hist_init$total_capacity, order.by = hist_init$date)
zoo_cov <- zoo(hist_init[, c("prop_1ml", "total_submitted_capacity")], order.by = hist_init$date)
monthly_total <- aggregate(zoo_total, as.yearmon, mean)
monthly_cov <- aggregate(zoo_cov, as.yearmon, mean)
# 3. Convert aggregated series to ts for ARIMA
ts_total <- ts(coredata(monthly_total),
start = c(as.numeric(format(start(monthly_total), "%Y")),
as.numeric(format(start(monthly_total), "%m"))),
frequency = 12)
ts_prop <- ts(coredata(monthly_cov[,"prop_1ml"]),
start = c(as.numeric(format(start(monthly_cov), "%Y")),
as.numeric(format(start(monthly_cov), "%m"))),
frequency = 12)
ts_total_submitted_capacity <- ts(coredata(monthly_cov[,"total_submitted_capacity"]),
start = c(as.numeric(format(start(monthly_cov), "%Y")),
as.numeric(format(start(monthly_cov), "%m"))),
frequency = 12)
# 4. Fit ARIMA models for each covariate and forecast
fit_prop  <- auto.arima(ts_prop)
ts_total_submitted_capacity <- auto.arima(ts_total_submitted_capacity)
fc_prop  <- forecast(fit_prop,  h = horizon)
fc_total_submitted_capacity <- forecast(ts_total_submitted_capacity, h = horizon)
# 5. Build future covariates from forecasts
future_cov <- cbind(
prop_1ml     = as.numeric(fc_prop[[covariates_interval]]),
total_submitted_capacity = as.numeric(fc_total_submitted_capacity[[covariates_interval]])
)
# 6. Fit ARIMA for total capacity with covariates and forecast
xreg_cov <- coredata(monthly_cov)
fit_total <- auto.arima(ts_total, xreg = xreg_cov)
fc_total <- forecast(fit_total, xreg = future_cov, h = horizon)
# Prepare data for plotting with calendar dates
library(zoo)
# Observed monthly dates and values
obs_dates <- as.Date(as.yearmon(time(monthly_total)))
obs_values <- coredata(monthly_total)
# Forecast dates
fc_dates <- as.Date(as.yearmon(time(fc_total$mean)))
# Build data frame for observed data
df_obs <- data.frame(
date = obs_dates,
total_capacity = obs_values,
type = "Observed"
)
# Build data frame for forecast data (mean and intervals)
df_fc <- data.frame(
date = rep(fc_dates, times = 3),
total_capacity = c(as.numeric(fc_total$mean),
as.numeric(fc_total$lower[,2]),
as.numeric(fc_total$upper[,2])),
interval = rep(c("Mean", "Lower", "Upper"), each = length(fc_dates)),
type = "Forecast"
)
# Combine observed and forecast mean for plotting lines
# df_line <- rbind(
#   df_obs %>% select(date, total_capacity, type),
#   df_fc %>% filter(interval == "Mean") %>% select(date, total_capacity, type)
# )
df_line <- rbind(
df_obs %>% select(date, total_capacity, type),
df_fc %>% filter(interval == "Mean") %>% select(date, total_capacity, type)
)
# add the last observed point to forecast line to avoid the visual jump
last_obs_point <- tail(df_obs, 1)
df_line <- rbind(df_line, last_obs_point %>% mutate(type = "Forecast"))
# Prepare forecast ribbon data
df_ribbon <- df_fc %>%
filter(interval %in% c("Lower", "Upper")) %>%
tidyr::pivot_wider(names_from = interval, values_from = total_capacity)
# add crossing dates
# Forecast results
t_forecast <- time(fc_total$mean)            # monthly time index
mean_vals  <- as.numeric(fc_total$mean)
upper_vals <- as.numeric(fc_total$upper[,2]) # 95% upper
# Put into zoo with yearmon index
# Convert forecast index to Date (1st of each month)
zoo_mean  <- zoo(mean_vals,  as.Date(as.yearmon(t_forecast)))
zoo_upper <- zoo(upper_vals, as.Date(as.yearmon(t_forecast)))
# Now interpolate to daily grid
fine_grid <- seq(from = start(zoo_mean), to = end(zoo_mean) + 31, by = "day")
fine_mean  <- na.approx(zoo_mean,  xout = fine_grid)
fine_upper <- na.approx(zoo_upper, xout = fine_grid)
# Find crossings
mean_idx  <- which(fine_mean  >= 1)[1]
upper_idx <- which(fine_upper >= 1)[1]
mean_cross_date  <- if (length(mean_idx))  fine_grid[mean_idx]  else NA
upper_cross_date <- if (length(upper_idx)) fine_grid[upper_idx] else NA
print(list(mean_cross = mean_cross_date, upper_cross = upper_cross_date))
# Build annotation label
annot_lbl <- paste0("Mean crosses: ", ifelse(is.na(mean_cross_date), "NA", format(mean_cross_date, "%Y-%m-%d")),
"\n95% upper crosses: ", ifelse(is.na(upper_cross_date), "NA", format(upper_cross_date, "%Y-%m-%d")))
# Plot results using ggplot with calendar dates
ggplot() +
geom_line(data = df_line %>% filter(type == "Observed"),
aes(x = date, y = total_capacity), color = "black") +
geom_line(data = df_line %>% filter(type == "Forecast"),
aes(x = date, y = total_capacity), color = "blue") +
geom_ribbon(data = df_ribbon,
aes(x = date, ymin = Lower, ymax = Upper),
fill = "blue", alpha = 0.2) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
annotate("text", x = max(fc_dates), y = 1.05, label = annot_lbl,
hjust = 1, vjust = 5, color = "darkred") +
ggtitle("Monthly total capacity with ARIMA + covariates (aggregated monthly)") +
ylab("Fraction full (0–1)") +
xlab("") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
use_r("single_arima")
load_all()
load_all()
single_arima()
check()
tools::showNonASCIIfile()
tools::showNonASCIIfile("single_arima.R")
tools::showNonASCIIfile("R/single_arima.R")
check()
check()
horizon <- 6  # months
covariates_interval <- "mean" # "upper" for a worst case scenario on the covariates
# 1. Load and adjust with initial stock
hist <- readHistorical()
init_1ml  <- 196412 - hist$cumulative_1.0[nrow(hist)]
